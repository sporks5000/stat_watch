#! /bin/bash
### Create a Stat Watch job

function fn_name {
	read -ep "Is there a specific name you want to use for this job (leave blank for \"$v_ACCOUNT\")? " v_NAME
	if [[ -z $v_NAME ]]; then
		v_NAME="$v_ACCOUNT"
	fi
	if [[ $( echo "$v_NAME" | egrep -c "^[0-9a-zA-Z]+$" ) -lt 1 ]]; then
		echo "The name should only contain letters and numbers"
		fn_name
	fi
	if [[ -f "$f_JOBS" ]]; then
		if [[ $( egrep -c "^$v_NAME:" "$f_JOBS" ) -gt 0 ]]; then
			echo "That name has already been used"
			fn_name
		fi
	fi
}

function fn_create {
	### Prompt for basic details about the job that we're going to create
	read -ep "What is the name of the account that you're creating a stat_watch job for? " v_ACCOUNT
	if [[ $( grep -E "^""$v_ACCOUNT"":" -c /etc/passwd ) -lt 1 ]]; then
		echo "Account \"$v_ACCOUNT\" Does not exist"
		exit
	else
		v_HOMEDIR="$( grep -E "^""$v_ACCOUNT"":" /etc/passwd | cut -d ":" -f6 )"
	fi
	if [[ -d "$v_HOMEDIR""/public_html" ]]; then
		read -ep "Monitor directory \"$v_HOMEDIR""/public_html\" (y/N)? " v_YN
		if [[ $( echo "$v_YN" | grep -E -c "^[yY]" ) -gt 0 ]]; then
			v_MONITOR="$v_HOMEDIR""/public_html"
		fi
	fi
	if [[ -z $v_MONITOR ]]; then
		read -ep "Name one directory we should monitor: " v_MONITOR
		if [[ ! -e $v_MONITOR ]]; then
			echo "\"$v_MONITOR\" is not a directory"
			exit
		fi
	fi

	fn_name

	### And figure out where we're going to store this job
	if [[ $( stat -c %n /*/"$d_WORKING"/ 2> /dev/null | wc -l ) -gt 0 ]]; then
		echo "There are currently stat_watch working directories in the following root-level directories:"
		stat -c %n /*/"$d_WORKING"/ 2> /dev/null | sed "s/^/   /;s/\/$d_WORKING\/$//"
		echo
	fi
	read -ep "What root-level directory do you want backups to be placed on? " v_PART
	if [[ ! -d "$v_PART" ]]; then
		if [[ -d "/""$v_PART" ]]; then
			v_PART="/""$v_PART"
		else
			echo "\"$v_PART\" Is not a root-level directory"
			exit
		fi
	fi
	v_DIR="$v_PART"/"$d_WORKING"/"$v_ACCOUNT"
	if [[ -f "$v_DIR"/"$v_NAME".job ]]; then
		echo "There already appears to be a stat_watch job at \""$v_DIR"/"$v_NAME".job\". You can delete or modify that."
		exit
	fi

	### Prompt if the job should stop running after 45 days
	read -ep "Do you want this job to stop running after 45 days, and for all backed up files to be removed after 60 days (Y/n)? " v_YN
	if [[ $( echo "$v_YN" | grep -E -c "^[nN]" ) -eq 0 ]]; then
		v_EXPIRE=true
	fi

	### Prompt for an email address to send reports to
	read -ep "What email address should reports be sent to (leave blank for none)? " v_EMAIL
	if [[ -n $v_EMAIL ]]; then
		echo -e "\e[91m"
		echo "If $v_EMAIL is a customer-facing address, MAKE SURE that appropriate expectations have been set for how these emails will be followed up on."
		echo "Here is an example of setting such expectations: https://raw.githubusercontent.com/sporks5000/stat_watch/master/texts/expectations.txt"
		echo
		echo "Note: If you create a file at \"$v_DIR/$v_NAME""_message_head.txt\" or \"$v_DIR/$v_NAME""_message_foot.txt\", the contents of that file will be sent at the top or bottom, respectively, of each email message. It might be wise to set expectations there as well"
		echo -e "\e[0m"
		### Pause here, because I SUPER want people to read this
		sleep 10
	fi

	### Create the relevant files
	mkdir -p "$v_DIR"/backup_"$v_NAME"
	touch $v_DIR/$v_NAME.log
	f_JOB="$v_DIR/$v_NAME".job
	cat << EOF > "$f_JOB"
	### This file created by $v_PROGRAMNAME
	I $v_MONITOR
	BackupD $v_DIR/backup_$v_NAME
	### back up the following extensions: .php, .php4, .php5, .php7, .pl, .pm, .py, .js, .json, .css, .cgi .htm, .html, .htaccess, .htpasswd, .sh, .rb
	BackupR \.(p(hp(4|5|7)?|[lym])|js(on)?|c(ss|gi)|ht(ml?|access|passwd)|sh|rb)$
	BackupMD 7
	BackupMC 4
	Log $v_DIR/$v_NAME.log

	### These lines specific to the functionality of $v_PROGRAMNAME
	Name $v_NAME
	Email-retain 20
	EOF
	if [[ -n $v_EMAIL ]]; then
		echo "Email $v_EMAIL" >> "$f_JOB"
	fi
	if [[ $v_EXPIRE == true ]]; then
		echo "Expire $( date --date="now + 45 days" +%s )" >> "$f_JOB"
	fi

	### Log that the job was created by this script
	echo "$( date +%Y-%m-%d" "%T" "%z ) - Job \"$f_JOB\" created by $v_PROGRAMNAME" >> "$v_DIR"/"$v_NAME".log

	### Create a working directory and a file to document jobs created
	mkdir -p $v_PROGRAMDIR/."$d_WORKING"
	f_TEMP=$( mktemp )
	### Copy all of the other jobs into a temp file
	grep -E -v "^$f_JOB - Created " "$f_JOBS" > "$f_TEMP" 2> /dev/null
	### Add this job to the temp file
	echo "$v_NAME"":""$f_JOB - Created $( date +%Y-%m-%d" "%T" "%z )" >> "$f_TEMP"
	### Replace the temp file
	mv -f "$f_TEMP" "$f_JOBS"

	### Output text telling the user what next steps they need to take
	echo
	echo -e "A job file has been created at \"\e[92m$f_JOB\e[0m\""
	echo "Run \"$v_PROGRAMDIR/$f_PERL_SCRIPT --help\" for further information on how it can be edited to suit your needs"
	echo "Once you have that file organized as you need it, run the following command:"
	echo
	echo "$v_PROGRAMDIR/$v_PROGRAMNAME --run \"$f_JOB\""
	echo
	echo "Then add the following line to root's crontab (adjusting times if necessary):"
	echo
	### set a random minute from 1 to 59 for the cron job to run
	echo "$(( 1 + RANDOM % 58 )) */2 * * * $v_PROGRAMDIR/$v_PROGRAMNAME --run "$f_JOB" > /dev/null 2>&1"
	echo
}
