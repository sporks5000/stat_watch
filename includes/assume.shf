#! /bin/bash

function fn_find_pwd {
### Find the current directory and see if it's part of an assumption
	if [[ ! -f "$v_PROGRAMDIR"/."$d_WORKING"/assumptions ]]; then
		return
	fi
	local v_PWD="$( pwd -P )"
	echo -n "$( fn_find_assume $v_PWD )"
}

function fn_find_assume {
### Find if this directory is part of an assumption
	local d_CUR="$1"
	local v_LINE="$( grep -Ea "^$d_SAN_CUR"$'\000' "$v_PROGRAMDIR"/."$d_WORKING"/assumptions | tail -n1 )"
	local v_RETURN=
	if [[ -z "$v_LINE" ]]; then
		local d_PARENT="$( echo "$d_CUR" | rev | cut -d "/" -f2- | rev )"
		if [[ -n "$d_PARENT" ]]; then
			v_RETURN="$( fn_find_assume "$d_PARENT" )"
		fi
	else
		v_RETURN="$( grep -Ea "^$d_SAN_CUR"$'\000' "$v_PROGRAMDIR"/."$d_WORKING"/assumptions | tail -n1 | cut -d $'\000' -f2 )"
	fi
	echo -n "$v_RETURN"
}

function fn_assume_include {
### Modify the command line arguments to include any assumed job files
	local a_CL_ARGUMENTS2=( "$@" )
	local v_ARG=
	for (( c=0; c<=$(( ${#a_CL_ARGUMENTS2[@]} - 1 )); c++ )); do
		v_ARG="${a_CL_ARGUMENTS2[$c]}"
		if [[ "$v_ARG" == "-i" || "$v_ARG" == "--include" || "$v_ARG" == "--no-assume" ]]; then
			b_ADD_INCLUDE=false
		fi
	done
}

function fn_create_assumption {
	if [[ -z "$1" || -z "$2" ]]; then
		return
	elif [[ ! -f "$1" || ! -d "$2" ]]; then
		return
	fi
	### Create a working directory and a file to document assumptions
	mkdir -p $v_PROGRAMDIR/."$d_WORKING"
	local f_TEMP=$( mktemp )
	local d_ASSUME="$2"
	d_ASSUME="$( cd "$d_ASSUME" && pwd -P )"
	if [[ "${d_ASSUME: -1}" == "/" ]]; then
		### Remove a trailing slash
		d_ASSUME="${d_ASSUME:0:${#d_ASSUME}-1}"
	fi
	local d_ASSUME_SAN="$( fn_sanitize "$d_ASSUME" )"
	### Put all other assumptions into a temp file
	grep -Ea -v "^$d_ASSUME_SAN"$'\000' "$v_PROGRAMDIR"/."$d_WORKING"/assumptions > "$f_TEMP" 2> /dev/null
	### Add this assumption to the temp file
	printf '%b' "$d_ASSUME"'\0' >> "$f_TEMP"
	echo "$1" >> "$f_TEMP"
	### Replace the assumptions file with the temp file
	mv -f "$f_TEMP" "$v_PROGRAMDIR"/."$d_WORKING"/assumptions
	echo "Assumption created"
}

function fn_sanitize {
### Given a variable that we're gonig to run through an egrep, escape all special characters
	v_OUTPUT="${1//\\/\\\\}"
	v_OUTPUT="${v_OUTPUT//\*/\\*}"
	v_OUTPUT="${v_OUTPUT//\./\\.}"
	v_OUTPUT="${v_OUTPUT//[/\\[}"
	v_OUTPUT="${v_OUTPUT//|/\\|}"
	v_OUTPUT="${v_OUTPUT//\?/\\?}"
	v_OUTPUT="${v_OUTPUT//\(/\\(}"
	v_OUTPUT="${v_OUTPUT//)/\\)}"
	v_OUTPUT="${v_OUTPUT//$/\\$}"
	v_OUTPUT="${v_OUTPUT//+/\\+}"
	v_OUTPUT="${v_OUTPUT//^/\\^}"
	v_OUTPUT="${v_OUTPUT//{/\\{}"
	echo -n "$v_OUTPUT"
}


