A [[Liquid_Web_Custom_Scripts|Liquid Web custom script]] to capture stats on all files under a directory and compare them in the future. If a customer's site has been hacked and we were not able to find the root cause, this will allow us to have a point of reference to compare against if the site becomes hacked again.


= Installation =


<source lang='bash'>
wget -O /root/bin/stat_watch.pl http://layer3.liquidweb.com/acwilliams/stat_watch.pl
if [[ $( cat /root/bin/stat_watch.pl | md5sum | cut -d " " -f1 ) != $( wget -qO /dev/stdout http://layer3.liquidweb.com/acwilliams/stat_watch.pl.md5sum ) ]]; then
   echo "md5sum did not match. Try again."
   rm -fv /root/bin/stat_watch.pl
else
   chmod +x /root/bin/stat_watch.pl
   /root/bin/stat_watch.pl --help
fi
</source>

If you receive any errors when running "/root/bin/stat_watch.pl --help", and you are on a cPanel server, run the following command to modify the file so that it runs using cPanel's version of Perl instead:

<source lang='bash'>
sed -i '1 s@^.*$@#! /usr/local/cpanel/3rdparty/bin/perl@' /root/bin/stat_watch.pl
</source>


= Usage and Command Line Flags =


Every effort has been made to ensure that the help output provided by running "/root/bin/stat_watch.pl --help" is thorough and understandable. If there is any confusion or any areas where elaboration is needed, don't hesitate to contact ACWilliams with questions.


= General Use Cases =


== Capturing stats now, comparing later ==


If a customer's site has been hacked and they are concerned that it will happen again, we can expedite future investigations by capturing the stats of their files now so that we have something to compare them to in the future.

Capture the current stats of files:

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/account/public_html > /root/stat_watch1.txt
</source>

Note: If you add the "--verbose" flag, this will output every directory it's actively working within. This information isn't really all that USEFUL, but it's more exciting than staring at the terminal waiting for a command to finish

Be sure to note the ticket thoroughly with the details of where the file was stored. When we want to check the stats of files on the account again, we just need to run another report and then assess the differences:

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/account/public_html > /root/stat_watch2.txt
/root/bin/stat_watch.pl --diff /root/stat_watch1.txt /root/stat_watch2.txt
</source>


== Comparing current files to backups ==


Imagine a customer's site was hacked and you want to know what was different before you overwrite everything with the contents of a backup. The customer's document root is located at '''/home/account/public_html''' and you've expanded the backups so that the equivalent folder is located at '''/home/lwtemp/account/homedir/public_html'''. Here is the process of comparing the stats of the files in those directories:

Get the stats for the backup directory, using the "--as-dir" flag so that the output will show the files as if they came from the directory specified:

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/lwtemp/account/homedir/public_html --as-dir /home/account/public_html > /root/stat_watch1.txt
</source>

Looking at the file that was created, the file paths will have been reported as '''/home/account/public_html''' rather than '''/home/lwtemp/account/homedir/public_html''':

<source lang='bash'>
[root@host ~]# head -n3 /root/stat_watch1.txt
Processing: '/home/account/public_html' - 1534678187
'/home/account/public_html' -- drwxr-x--- -- 501 -- 99 -- 4096 -- 2018-08-16 03:06:56.100906370 -0400 -- 2018-08-16 03:25:38.183053341 -0400
'/home/account/public_html/index.html' -- -rw-r--r-- -- 501 -- 513 -- 0 -- 2015-03-06 17:09:50.945493776 -0500 -- 2016-08-11 09:51:26.999538847 -0400
</source>

Now get the stats for the current contents of the directory:

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/account/public_html > /root/stat_watch2.txt
</source>

Now run "stat_watch.pl --diff" as was done above:

<source lang='bash'>
/root/bin/stat_watch.pl --diff /root/stat_watch1.txt /root/stat_watch2.txt
</source>

Note: It's likely that the backups were stored in such a way that the ctime of the files will not have been retained, and that the mtime of the files will have been truncated to full seconds. In order to compensate for these things, you will likely want to use the "--no-ctime" and "--no-partial-seconds" flags
Note: It's possible that there's a cache directory present where a lot of changes have occurred. If you want to avoid outputting changes from a specific directory, just use the "--ignore" flag with the full path to that directory after:

<source lang='bash'>
/root/bin/stat_watch.pl --diff /root/stat_watch1.txt /root/stat_watch2.txt --ignore /home/account/public_html/cache --no-ctime --no-partial-seconds
</source>

Now that we know what files have changed, we can use the Linux "diff" command to see how they differ and make an assessment on if those changes are malicious:

<source lang='bash'>
diff /home/lwtemp/account/homedir/public_html/.htaccess /home/account/public_html/.htaccess
</source>


== Comparing files after restoring a backup ==


In the example above, there was enough free hard drive space on the server to expand the backup and still have original site contents in place, but there are circumstances where that is not the case - where the original MUST be deleted before the backup can be uncompressed.

In this situation, first capture the stats of the existing files:

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/account/public_html > /root/stat_watch2.txt
</source>

Then once the backup is restored, capture the stats of the files as they were in the backup, then compare:

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/account/public_html > /root/stat_watch1.txt
</source>

Be aware that "stat_watch.pl --diff" will use the timestamps on the files it's given to determine which is older. This can make a big difference if a file is present in one place, but missing in the other - the output could say that it was removed rather than created.

In this circumstance, we '''need''' to run it against the newer set of files first, so to eliminate confusion, you can use the "--before" and "--after" flags to indicate which file was which:

<source lang='bash'>
/root/bin/stat_watch.pl --diff --before /root/stat_watch1.txt --after /root/stat_watch2.txt
</source>

Note: As above, it's possible that you will want to use the "--no-ctime", "--no-partial-seconds", and "--ignore" flags

We won't have access to any of the changed files in order to compare their contents, but we will at least have the relevant timestamps so that we can search relevant logs to see if there is anything there worthy of note.


= Advanced Usage =


== Advanced Rules ==


If there are specific files or file extensions that you want Stat Watch to include or ignore when generating a report, you can create a Stat Watch include/ignore file and specify that Stat Watch adhere to the rules outlined in that file by referencing it with the "-i" flag:

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/account/public_html -i /root/include_file.txt > /root/stat_watch1.txt
</source>

For more information about what can be accomplished with the include/ignore file, run stat_watch.pl with the "--help-includes" flag

<source lang='bash'>
/root/bin/stat_watch.pl --help-includes
</source>


== Also Capturing MD5 Sums ==


Typically the combination of mtime, ctime, and file size is enough to know if a file has changed, however there are circumstances where it's desirable to have more reassurance regarding whether there have been any changes to a file's contents. Under these circumstances, the "--md5" flag can be used to capture MD5 sums of all the files present.

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/account/public_html --md5 > /root/stat_watch1.txt
</source>

Typically it is not recommended that this feature be used as it results in additional processing power and disk IO. The [[Stat_Watch#Backing_up_Files|advanced features]] available with include/ignore files allow for singling out individual files for which this added level of detail is necessary.

To capture '''any''' MD5 sums, whether using the "--md5" flag or settings within an include/ignore file, the perl modules 'Digest::MD5' and 'Digest::MD5::File' will need to be present, along with a file located at "'''./.stat_watch/md5.pm'''" where "'''./'''" is the directory that stat_watch.pl is located. The contents of that file can be found here:

https://raw.githubusercontent.com/sporks5000/stat_watch/master/.stat_watch/md5.pm


== Backing up Files ==


Using a Stat Watch report generated with the "--record" functionality, you can create backups of certain files in order to ensure that you have copies available for later.

First you need to generate a Stat Watch report:

<source lang='bash'>
/root/bin/stat_watch.pl --record /home/account/public_html > /root/stat_watch1.txt
</source>

Then backup the files that you're interested in using the "--backup" flag in conjunction with the "--backupd", "--backup+", and "--backupr" flags. Here's an example that would backup all of the files found that end with extensions .php, .php4, .php5, .php7, .pl, .pm, .py, .js, .css, .htm, .html, .htaccess, .htpasswd, .sh, and .rb to the directory '''/home/stat_watch/temp_backup''':

<source lang='bash'>
mkdir -p /home/stat_watch/temp_backup
/root/bin/stat_watch.pl --backup /root/stat_watch1.txt --backupr '\.(p(hp(4|5|7)?|[lym])|js|css|ht(ml?|access|passwd)|sh|rb)$' --backupd /home/stat_watch/temp_backup
</source>

The files will be stored with the backup directory specified with the "--backupd" functioning as the equivalent of "/", and with a unix timestamp appended to the end of their file name. Thus with the above command, the file '''/home/account/public_html/directory/script.php''' would have a backup located at '''/home/stat_watch/temp_backup/home/account/public_html/directory/script.php_1533578720'''. "cp -a" is used to make the copy, so all stat data except ctime should be retained.


== Listing Backed-up Files ==


Stat Watch maintains a list of all of the directories that it has backed up to, so it's easy to check from the command line if it has created a backup of a file.

For example, to see all of the backups made of '''/home/account/public_html/directory/script.php''', you would run the following command:

<source lang='bash'>
/root/bin/stat_watch.pl --list /home/account/public_html/directory/script.php
</source>

And the output you receive would look something like the following:

 Available Backups for '/home/account/public_html/directory/script.php':
   '/home/stat_watch/sporks50/backup_sporks50/home/account/public_html/directory/script.php_1533578720' -- Timestamp: 2018-08-06 14:05:20 -0400

With this output, you have the full path to both the current file and all backups, making it easy to compare them with "diff" or to use "cp -a" to overwrite the current file with one of the backups.


== Watching a Directory ==


stat_watch.pl has all of the components necessary to run repeated checks against the contents of a directory and detect if changes are being made, but it doesn't put them together in any particular way. There is, however, a wrapper script for that. stat_watch_wrap.sh is part of the Stat Watch project and can be installed using the following:

<source lang='bash'>
wget -O /root/bin/stat_watch_wrap.sh http://layer3.liquidweb.com/acwilliams/stat_watch_wrap.sh
if [[ $( cat /root/bin/stat_watch_wrap.sh | md5sum | cut -d " " -f1 ) != $( wget -qO /dev/stdout http://layer3.liquidweb.com/acwilliams/stat_watch_wrap.sh.md5sum ) ]]; then
   echo "md5sum did not match. Try again."
   rm -fv /root/bin/stat_watch_wrap.sh
else
   chmod +x /root/bin/stat_watch_wrap.sh
   /root/bin/stat_watch_wrap.sh --help
fi
</source>

Every effort has been made to ensure that the help output provided by running "/root/bin/stat_watch_wrap.sh --help" is thorough and understandable. If there is any confusion or any areas where elaboration is needed, don't hesitate to contact ACWilliams.

Running this without any flags will walk you through creating a job that can be run via cron to repeatedly check and compare the contents of one or more directories:

<source lang='bash'>
/root/bin/stat_watch_wrap.sh
</source>

By default, the job that's created will backup all files ending in the following extensions: .php, .php4, .php5, .php7, .pl, .pm, .py, .js, .css, .htm, .html, .htaccess, .htpasswd, .sh, .rb. This can be modified to capture whatever is desired.

Any time a change is detected, output will be generated specifying what what files were changes and which of their stats changed. If the file that changed has one of the extensions listed above, the new version of the file will be backed up. You can configure it to send an email that includes the details every time a change is detected.


=== Emails and Setting Expectations ===


If it is decided to have Stat Watch send emails directly to the customer, it is '''necessary''' to ensure that appropriate expectations are set for what we will and will not do regarding them. We WILL NOT:

# Assess whether or not a new or changed file is malicious or unwanted on behalf of the customer. They need to make that determination themselves

We WILL:

# Remove or disable the file at their request
# Investigate to determine how it was modified or put in place
# Replace the file with an earlier copy from an existing backup

The Stat Watch project has examples of communication with the intent of setting these expectations: https://github.com/sporks5000/stat_watch/blob/master/expectations.md


=== Alternatives for Watching ===


Both Maldet and CSX also have solutions that watch over the content of a directory and report on it. Both of these have down-sides, however: Maldet only reports on files that were detected to be malicious, and CSX has an associated cost that not all end users are willing to pay. Both of them use the inotify Linux subsystem, which means that they are more thorough at detecting changes than Stat Watch, but which also means that any changes made during periods where they are not running can be missed entirely. CSX has measures in place to prevent this from happening, maldet does not.

Neither of these solutions provides an option to backup changes it detects so that the file can manually be compared or restored to later.


==== Additional Details on Maldet ====


The current official version of Maldet available through [https://www.rfxn.com/projects/linux-malware-detect/ the official Maldet website] is 1.6.2 which includes a bug in this watch functionality that may result in changes to certain files being missed. A bug fix has been accepted for version 1.6.3, however as of the time of this writing, that version has not been finalized yet.

See [https://github.com/rfxn/linux-malware-detect/pull/292 this pull request] for details on this bug.


= Reporting Bugs, Feature Requests =


If you notice any bugs or behavior that you don't believe is expected, don't hesitate to email acwilliams@liquidweb.com. He's a pretty cool guy, and he gets super excited when people like scripts he's written enough to give him feedback on them.

Stat Watch has git repositories at the following locations:

# https://git.liquidweb.com/acwilliams/stat_watch
# https://github.com/sporks5000/stat_watch

